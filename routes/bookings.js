const express = require('express');
const router = express.Router();
const pool = require('../db');
const auth = require('../middleware/auth');

// POST /api/bookings
router.post('/', auth, async (req, res) => {
  const {
    event_id,
    full_name,
    email,
    phone,
    quantity,
    address,
    pickup_location,
  } = req.body;

  const user_id = req.user.id;

  try {
    // üîé ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å event_id
    const eventResult = await pool.query('SELECT name FROM events WHERE id = $1', [event_id]);

    if (eventResult.rows.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ô‡∏µ‡πâ' });
    }

    const event_name = eventResult.rows[0].name;

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á bookings
    const insertResult = await pool.query(
      `
      INSERT INTO bookings (
        user_id, event_id, event_name, full_name, email, phone,
        quantity, address, pickup_location
      ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)
      RETURNING *
      `,
      [
        user_id,
        event_id,
        event_name,
        full_name,
        email,
        phone,
        quantity,
        address,
        pickup_location,
      ]
    );

    res.status(201).json({ message: '‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', booking: insertResult.rows[0] });

  } catch (error) {
    console.error('Error creating booking:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß' });
  }
});

// GET bookings ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
router.get("/user", auth, async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({ error: "Unauthorized - user not found in request" });
    }

    // ‡∏î‡∏∂‡∏á booking ‡∏Ç‡∏≠‡∏á user ‡∏à‡∏≤‡∏Å PostgreSQL
    const result = await db.query(
      'SELECT * FROM bookings WHERE user_id = $1 ORDER BY created_at DESC',
      [req.user.id]
    );

    res.json(result.rows); // ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  } catch (err) {
    console.error("Error fetching bookings:", err.message);
    res.status(500).json({ error: "Internal Server Error" });
  }
});



module.exports = router;
